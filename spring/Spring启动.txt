AbstractApplication中的refresh()方法

1.prepareRefresh()
    getEnvironment()如果没有环境变量就会进行初始化
          environment=new StandardEnvironment()在父类AbstractEnvironment的构造函数中调用customizePropertySources()方法
             再调用一下2个方法把环境参数都加载到内存中来
             System.getProperties() 主要获得当前java进程中的环境变量例如vm启动传入的参数。
             和
             System.getenv()主要是获得系统的环境变量   2个系统方法。
             
2.obtainFreshBeanFactory()
     refreshBeanFactory()调用的是子类GenericApplicationContext中的方法给beanFactory的SerializationId赋以自身的id
     
     getBeanFactory()调用子类GenericApplicationContext中的方法
     
3.prepareBeanFactory()
    首先将上下文的ClassLoader(类装载器)传递给beanFactory的内部子类工厂。
    
    在beanFactory中beanPostProcessors集合（ArrayList）加入ApplicationContextAwareProcessor 处理器。
    
    再beanFactory中的ignoredDependencyInterfaces集合(Set)中添加EnvironmentAware.class 、 EmbeddedValueResolverAware.class 、
                                                        ResourceLoaderAware.class 、 ApplicationEventPublisherAware.class 、
                                                        MessageSourceAware.class 、 ApplicationContextAware.class 类
    
    然后再beanFactory中的resolvableDependencies集合(Map)中添加  BeanFactory.class -> beanFactory(DefaultListableBeanFactory类)
                                                              ResourceLoader.class -> 当前上下文(AnnotationConfigApplicationContext或者
                                                                                                AnnotationConfigEmbeddedWebApplicationContext)
                                                              ApplicationEventPublisher.class -> 当前上下文（对应的对象同上 ）
                                                              ApplicationContext.class -> 当前上下文（对应的对象同上 ）
    
    在beanFactory中beanPostProcessors集合（ArrayList）加入 ApplicationListenerDetector 处理器。
    
    检测beanFactory是否有loadTimeWeaver的Bean  
         if(有的话){
           在beanFactory中beanPostProcessors集合（ArrayList）加入LoadTimeWeaverAwareProcessor处理器
           设置beanFactory的setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()传入的是当前上下文的加载器))
         }
         
         
    检测beanFactory中是否存在environment对应的Bean对象   {
       调用DefaultListableBeanFactory类中的registerSingleton方法
             加入singletonObjects（Map）
             从singletonFactories和earlySingletonObjects(Map)集合移除
             加入registeredSingletons(Set)结合
             if(是否在启动阶段){
              ...
             }else{
                if(beanDefinitionMap集合是否包含(environment)对象){
                   加入manualSingletonNames集合
               }
           }
       清空allBeanNamesByType（Map）、singletonBeanNamesByType(Map)这2个集合
    }      
    检测beanFactory中是否存在systemProperties对应的Bean对象   同上   
    检测beanFactory中是否存在systemEnvironment对应的Bean对象  同上   
    
    
4.postProcessBeanFactory()  根据上下文对象来  

5.invokeBeanFactoryPostProcessors（）

 if( 传进来的beanFactory是BeanDefinitionRegistry类型 ){
	  最开始处理器有3个beanFactoryPostProcessors包括ConfigurationWarningsApplicationContextInitializer、
						       SharedMetadataReaderFactoryContextInitializer、
						       ConfigFileApplicationListener。
	  看以上3个处理器实现了BeanDefinitionRegistryPostProcessor接口的postProcessBeanDefinitionRegistry()方法没。
	  
	  实现了的调用之后加入registryPostProcessors(LinkedList)集合,不是的就加入regularPostProcessors（LinkedList）集合中。
	  ConfigurationWarningsApplicationContextInitializer和 SharedMetadataReaderFactoryContextInitializer加入
	   registryPostProcessors集合；
	   
	  ConfigFileApplicationListener加入regularPostProcessors集合;
	  
	  找BeanDefinitionRegistryPostProcessor.class，并实现了PriorityOrdered接口的方法{
	   从beanFactory中找寻BeanDefinitionRegistryPostProcessor.class对应的BeanName。
	   （这里找到的是ConfigurationClassPostProcessor类）
	   
	   if(判断这个BeanName是否实现PriorityOrdered接口){
		 并把实例加入priorityOrderedPostProcessors（ArrayList）集合；
		  把这个类的名字加入processedBeans(Set)集合中；
		} 
	 
		然后根据PriorityOrdered接口进行集合排序；
		然后把加入registryPostProcessors集合中去；
	 
		然后集中调用priorityOrderedPostProcessors集合中实例实现的BeanDefinitionRegistryPostProcessor接口的  
		postProcessBeanDefinitionRegistry（）方法；
	 }
	 
	 找BeanDefinitionRegistryPostProcessor.class，并实现了order接口的方法{
	   从beanFactory中找寻BeanDefinitionRegistryPostProcessor.class对应的BeanName。
	   （这里找到的是ConfigurationClassPostProcessor类）
	 
		if(判断processedBeans中是否包含这个BeanName && 判断这个BeanName是否实现Ordered接口){
		  把找到的实例加入orderedPostProcessors（ArrayList）集合；
		  把这个类的名字加入processedBeans(Set)集合中；
		} 
	 
		然后根据ordered接口进行集合排序；
		然后把加入registryPostProcessors集合中去；
	 
		然后集中调用orderedPostProcessors集合中实例实现的BeanDefinitionRegistryPostProcessor接口的
		postProcessBeanDefinitionRegistry（）方法；
	  }
	  
	  
	  然后循环去调用beanFactory中所有实现BeanDefinitionRegistryPostProcessor接口的类中的postProcessBeanDefinitionRegistry（）
	  （这里找到的是ConfigurationClassPostProcessor类，所以直接进入下一步）
	  
	  分别调用registryPostProcessors集合和regularPostProcessors结合中实现BeanFactoryPostProcessor接口的postProcessBeanFactory方法。
  }else{
     直接调用参入的beanFactoryPostProcessors中实现BeanFactoryPostProcessor接口的postProcessBeanFactory方法；
  }
  
  从beanFactory中查找BeanFactoryPostProcessor.class
